// <auto-generated />
using System;
using AirMap.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirMap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250622000702_init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirMap.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("Altitude")
                        .HasColumnType("float");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExactLocation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Indoor")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<long?>("SourceApiId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("AirMap.Models.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Pin")
                        .HasColumnType("int");

                    b.Property<long?>("SensorTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceApiId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("AirMap.Models.SensorDataValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("SensorModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceApiId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SensorModelId");

                    b.ToTable("SensorDataValues");
                });

            modelBuilder.Entity("AirMap.Models.SensorModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AverageHcho")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AveragePm1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AveragePm10")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AveragePm25")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Device")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Hcho")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Ijp")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("IjpDescription")
                        .HasMaxLength(512)
                        .HasColumnType("varchar");

                    b.Property<string>("IjpDescriptionEn")
                        .HasMaxLength(512)
                        .HasColumnType("varchar");

                    b.Property<string>("IjpString")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("IjpStringEn")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<bool?>("Indoor")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Pm1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Pm10")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Pm25")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PreviousIjp")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("SamplingRate")
                        .HasColumnType("decimal(18, 2)");

                    b.PrimitiveCollection<string>("SensorDataValuesIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceApiId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Device")
                        .IsUnique()
                        .HasFilter("[Device] IS NOT NULL");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("SensorId");

                    b.HasIndex("SourceApiId")
                        .IsUnique()
                        .HasFilter("[SourceApiId] IS NOT NULL");

                    b.ToTable("SensorModel", (string)null);
                });

            modelBuilder.Entity("AirMap.Models.SensorType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SourceApiId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SensorType");
                });

            modelBuilder.Entity("AirMap.Models.Sensor", b =>
                {
                    b.HasOne("AirMap.Models.SensorType", "SensorType")
                        .WithMany()
                        .HasForeignKey("SensorTypeId");

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("AirMap.Models.SensorDataValues", b =>
                {
                    b.HasOne("AirMap.Models.SensorModel", null)
                        .WithMany("SensorDataValues")
                        .HasForeignKey("SensorModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AirMap.Models.SensorModel", b =>
                {
                    b.HasOne("AirMap.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("AirMap.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId");

                    b.Navigation("Location");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("AirMap.Models.SensorModel", b =>
                {
                    b.Navigation("SensorDataValues");
                });
#pragma warning restore 612, 618
        }
    }
}
