// <auto-generated />
using System;
using AirMap.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirMap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250602111338_varchar_desc_update")]
    partial class varchar_desc_update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirMap.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("Altitude")
                        .HasColumnType("float");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExactLocation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Indoor")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("AirMap.Models.SensorModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AverageHCHO")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AveragePM1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AveragePM10")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AveragePM25")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Device")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("HCHO")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("IJP")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("IJPDescription")
                        .HasMaxLength(512)
                        .HasColumnType("varchar");

                    b.Property<string>("IJPDescriptionEN")
                        .HasMaxLength(512)
                        .HasColumnType("varchar");

                    b.Property<string>("IJPString")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("IJPStringEN")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<bool?>("Indoor")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("PM1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PM10")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PM25")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PreviousIJP")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal>("SamplingRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long?>("SensorTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Device")
                        .IsUnique()
                        .HasFilter("[Device] IS NOT NULL");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("SensorModel", (string)null);
                });

            modelBuilder.Entity("AirMap.Models.SensorType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SensorType");
                });

            modelBuilder.Entity("AirMap.Models.SensorModel", b =>
                {
                    b.HasOne("AirMap.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("AirMap.Models.SensorType", null)
                        .WithMany()
                        .HasForeignKey("SensorTypeId");

                    b.OwnsMany("AirMap.Models.SensorDataValues", "SensorDataValues", b1 =>
                        {
                            b1.Property<long>("SensorDataValuesId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<long>("Id"));

                            b1.Property<double?>("Value")
                                .HasColumnType("float");

                            b1.Property<string>("ValueType")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SensorDataValuesId", "Id");

                            b1.ToTable("SensorDataValues");

                            b1.WithOwner()
                                .HasForeignKey("SensorDataValuesId");
                        });

                    b.OwnsOne("AirMap.Models.Sensor", "Sensor", b1 =>
                        {
                            b1.Property<long>("SensorModelId")
                                .HasColumnType("bigint");

                            b1.Property<long?>("Id")
                                .HasColumnType("bigint");

                            b1.Property<int?>("Pin")
                                .HasColumnType("int");

                            b1.Property<long>("SensorTypeId")
                                .HasColumnType("bigint");

                            b1.HasKey("SensorModelId");

                            b1.HasIndex("SensorTypeId");

                            b1.ToTable("Sensor");

                            b1.WithOwner()
                                .HasForeignKey("SensorModelId");

                            b1.HasOne("AirMap.Models.SensorType", "SensorType")
                                .WithMany()
                                .HasForeignKey("SensorTypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("SensorType");
                        });

                    b.Navigation("Location");

                    b.Navigation("Sensor")
                        .IsRequired();

                    b.Navigation("SensorDataValues");
                });
#pragma warning restore 612, 618
        }
    }
}
