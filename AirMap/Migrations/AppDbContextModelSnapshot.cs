// <auto-generated />
using AirMap.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AirMap.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirMap.Data.AirQualityReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AveragePM1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AveragePM10")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AveragePM25")
                        .HasColumnType("numeric");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<decimal?>("HCHO")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("numeric");

                    b.Property<string>("IJP")
                        .HasColumnType("text");

                    b.Property<string>("IJPDescription")
                        .HasColumnType("text");

                    b.Property<string>("IJPString")
                        .HasColumnType("text");

                    b.Property<bool>("Indoor")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal?>("PM1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PM10")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PM25")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<string>("Timestamp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Latitude", "Longitude")
                        .IsUnique();

                    b.ToTable("AirQualityReadings");
                });

            modelBuilder.Entity("AirMap.Data.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Altitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("Indoor")
                        .HasColumnType("integer");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("AirMap.Data.SensorDataValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Source2ModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("ValueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Source2ModelId");

                    b.ToTable("SensorDataValue");
                });

            modelBuilder.Entity("AirMap.Data.Source1Model", b =>
                {
                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<string>("AveragePM1")
                        .HasColumnType("text");

                    b.Property<string>("AveragePM10")
                        .HasColumnType("text");

                    b.Property<string>("AveragePM25")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Epoch")
                        .HasColumnType("text");

                    b.Property<string>("HCHO")
                        .HasColumnType("text");

                    b.Property<string>("Humidity")
                        .HasColumnType("text");

                    b.Property<string>("IJPDescription")
                        .HasColumnType("text");

                    b.Property<string>("IJPString")
                        .HasColumnType("text");

                    b.Property<string>("Indoor")
                        .HasColumnType("text");

                    b.Property<decimal>("Lat")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Lon")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PM1")
                        .HasColumnType("text");

                    b.Property<string>("PM10")
                        .HasColumnType("text");

                    b.Property<string>("PM25")
                        .HasColumnType("text");

                    b.Property<string>("Temperature")
                        .HasColumnType("text");

                    b.HasKey("Device");

                    b.ToTable("Source1Models");
                });

            modelBuilder.Entity("AirMap.Data.Source2Model", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Timestamp")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Source2Models");
                });

            modelBuilder.Entity("AirMap.Data.SensorDataValue", b =>
                {
                    b.HasOne("AirMap.Data.Source2Model", null)
                        .WithMany("SensorDataValues")
                        .HasForeignKey("Source2ModelId");
                });

            modelBuilder.Entity("AirMap.Data.Source2Model", b =>
                {
                    b.HasOne("AirMap.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AirMap.Data.Source2Model", b =>
                {
                    b.Navigation("SensorDataValues");
                });
#pragma warning restore 612, 618
        }
    }
}
