@{
    ViewData["Title"] = "Mapa z Leaflet.js";
}
@using AirMap.Data
@using AirMap.Helper
@using AirMap.Helpers
@inject AppDbContext DbContext



<!DOCTYPE html>
<html>
<head>
    <title class="text-center">@ViewData["Title"]</title>
    <!-- Leaflet core -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

	<!-- Leaflet Routing -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
	
	<!-- MarkerCluster plugin --> 
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.default.css" />

    <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>
</head>
<body>

    <!-- Map container -->
    <div id="map"></div>

    <!-- Link Leaflet JavaScript  -->
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-Q6EutvdmLDMb4VjRbH/N05Dg8gW/MIn/k2N3uwRI0B8=" crossorigin=""></script>

</body>
</html>

@{
	var allSensors = await DatabaseHelper.GetAllAsync<SensorModel>(DbContext);
	allSensors = await DatabaseHelper.GetMissingData<SensorModel, Location>(allSensors, DbContext);
	allSensors = await DatabaseHelper.GetMissingData<SensorModel, Sensor>(allSensors, DbContext);
	allSensors = await DatabaseHelper.GetMissingDataFromList<SensorModel, SensorDataValues>(allSensors, DbContext);
	
    var serializedSensorData = Json.Serialize(allSensors); // To resolve TS1109
}

<script id="sensorData" type="application/json">
    @Html.Raw(serializedSensorData)
</script>

<script id="iconData" type="">


</script>

<!-- Map Initialization Script -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var map = L.map('map').setView([52.1143385, 19.4236714], 7);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap'
        }).addTo(map);


        // --- Sensor pins ---
        const sensorData = JSON.parse(document.getElementById('sensorData').textContent);

    const greenDefaultIcon = L.icon({
        //iconAlternativeUrl: '/AirQualityMarkers/defaults/green-dot.png',   // '/AirQualityMarkers/defaults/green-dot.png'
        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png', //-- add backup in case of fail of loading local folder
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const blueDefaultIcon = L.icon({
        //iconAlternativeUrl: '/AirQualityMarkers/defaults/blue-dot.png',  // '/AirQualityMarkers/defaults/blue-dot.png'
        iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png', //-- add backup in case of fail of loading local folder
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const veryGoodAirQualityIcon = L.icon({
        iconUrl: '/AirQualityMarkers/VeryGoodAQ.png',
        iconSize: [64, 64],
        iconAnchor: [32, 64],
        popupAnchor: [0, -48]
    });

    const goodAirQualityIcon = L.icon({
        iconUrl: '/AirQualityMarkers/GoodAQ.png',
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });
    
    const moderateAirQualityIcon = L.icon({
        iconUrl: '/AirQualityMarkers/ModerateAQ.png',
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const sufficientAirQualityIcon = L.icon({
        iconUrl: '/AirQualityMarkers/SufficientAQ.png',
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const badAirQualityIcon = L.icon({
        iconUrl: '/AirQualityMarkers/BadAQ.png',
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });

    const veryBadAirQualityIcon = L.icon({
        iconUrl: '/AirQualityMarkers/VeryBadAQ.png',
        iconSize: [32, 32],
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]
    });


    function getSensorDescription(sensor) {
        if (sensor && sensor.sensorDataValues != null){
            fetch('/api/sensor/GetIconData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(sensor)
        })
        .then(response => response.text())
        .then(data => {
            console.log("Sensor description from C#:", data);
        })
        .catch(error => {
            console.error("Error calling C# method:", error);
        });
        }
        else
        console.log("Other data (looko2)");
    };
    



            const markers = L.markerClusterGroup();

            sensorData.forEach(sensor => {
                let latLng = null;
                let icon = null;
                let popupText = "";

        if (sensor.latitude != null && sensor.longitude != null) 
        {
            latLng = L.latLng(sensor.latitude, sensor.longitude);
            icon = getSensorDescription(sensor) ?? greenDefaultIcon;
            popupText = sensor.name || "Sensor LookO2";
        } 
        else if (sensor.location && sensor.location.latitude != null && sensor.location.longitude != null) //(sensor.location && sensor.location.latitude != null && sensor.location.longitude != null)
        { 
            latLng = L.latLng(sensor.location.latitude, sensor.location.longitude);
            icon = getSensorDescription(sensor) ?? blueDefaultIcon;
            popupText = sensor.name || "SensorSC";
        }

        if (latLng) {
            const marker = L.marker(latLng, {icon: icon}).bindPopup(popupText);
            markers.addLayer(marker);
        }
    });

    // Add cluster group to the map
	map.addLayer(markers);



        let userLatLng = null;
        let routingControl = null;
        let destinationMarker = null;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

                L.marker(userLatLng).addTo(map)
                    .bindPopup("Twoja aktualna lokalizacja");

                map.setView(userLatLng, 10);
            }, function (error) {
                console.error("Błąd uzyskiwania lokalizacji: ", error);
            });
        } else {
            alert("Geolokalizacja nie jest obsługiwana przez Twoją przeglądarkę.");
        }
        //Usage of "ContextMenu (RMB)" to create a waypoint
        map.on('contextmenu', function (e) {
            if (!userLatLng) {
                alert("Lokalizacja użytkownika nie jest jeszcze dostępna.");
                return;
            }

            const destLatLng = e.latlng;

            if (destinationMarker) {
                map.removeLayer(destinationMarker);
            }

            destinationMarker = L.marker(destLatLng).addTo(map)
                .bindPopup("Nowy punkt docelowy")
                .openPopup();

            if (routingControl) {
                map.removeControl(routingControl);
            }

            routingControl = L.Routing.control({
                waypoints: [
                    userLatLng,
                    destLatLng
                ],
                routeWhileDragging: false,
                show: false,
                createMarker: function () { return null; },

            }).addTo(map);
        });
    });
</script>


