@{
    ViewData["Title"] = "Mapa z Leaflet.js";
}
@using AirMap.Data
@using AirMap.Helper
@using AirMap.Helpers
@inject AppDbContext DbContext



<!DOCTYPE html>
<html>
<head>
    <title class="text-center">@ViewData["Title"]</title>
    <!-- Leaflet core -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

    <!-- Leaflet Routing -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
	
    <!-- MarkerCluster plugin --> 
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.default.css" />

    <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js"></script>
</head>

<style>
    /*
     * These CSS rules affect the tooltips within maps with the custom-popup
     * class. See the full CSS for all customizable options:
     * https://github.com/mapbox/mapbox.js/blob/001754177f3985c0e6b4a26e3c869b0c66162c99/theme/style.css#L321-L366
    */
    .custom-popup .leaflet-popup-content-wrapper {
      background:#2c3e50;
      color:#fff;
      font-size:16px;
      line-height:24px;
      }
    .custom-popup .leaflet-popup-content-wrapper a {
      color:rgba(255,255,255,0.5);
      }
    .custom-popup .leaflet-popup-tip-container {
      width:30px;
      height:15px;
      }
    .custom-popup .leaflet-popup-tip {
      border-left:15px solid transparent;
      border-right:15px solid transparent;
      border-top:15px solid #2c3e50;
      }
</style>

<body>
    <!-- Map container -->
    <div class='custom-popup' id='map'></div>
</body>
</html>

@{
	var allSensors = await DatabaseHelper.GetAllAsync<SensorModel>(DbContext);
	allSensors = await DatabaseHelper.GetMissingData<SensorModel, Location>(allSensors, DbContext);
	allSensors = await DatabaseHelper.GetMissingData<SensorModel, Sensor>(allSensors, DbContext);
	allSensors = await DatabaseHelper.GetMissingDataFromList<SensorModel, SensorDataValues>(allSensors, DbContext);
	
    var serializedSensorData = Json.Serialize(allSensors); // To resolve TS1109
}

<script id="sensorData" type="application/json">
    @Html.Raw(serializedSensorData)
</script>


<!-- Map Initialization Script -->
<script>
    document.addEventListener("DOMContentLoaded", async function () {
        var map = L.map('map').setView([52.1143385, 19.4236714], 7);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap'
        }).addTo(map);

        const sensorData = JSON.parse(document.getElementById('sensorData').textContent);

        const icons = {
            veryGoodAirQualityIcon: L.icon({ iconUrl: '/AirQualityMarkers/VeryGoodAQ.png', iconSize: [64, 64], iconAnchor: [32, 64], popupAnchor: [0, -48] }),
            goodAirQualityIcon:      L.icon({ iconUrl: '/AirQualityMarkers/GoodAQ.png',     iconSize: [64, 64], iconAnchor: [32, 64], popupAnchor: [0, -48] }),
            moderateAirQualityIcon:  L.icon({ iconUrl: '/AirQualityMarkers/ModerateAQ.png', iconSize: [64, 64], iconAnchor: [32, 64], popupAnchor: [0, -48] }),
            sufficientAirQualityIcon:L.icon({ iconUrl: '/AirQualityMarkers/SufficientAQ.png', iconSize: [64, 64], iconAnchor: [32, 64], popupAnchor: [0, -48] }),
            badAirQualityIcon:       L.icon({ iconUrl: '/AirQualityMarkers/BadAQ.png',      iconSize: [64, 64], iconAnchor: [32, 64], popupAnchor: [0, -48] }),
            veryBadAirQualityIcon:   L.icon({ iconUrl: '/AirQualityMarkers/VeryBadAQ.png',  iconSize: [64, 64], iconAnchor: [32, 64], popupAnchor: [0, -48] }),
            unknownAirQualityIcon:   L.icon({ iconUrl: '/AirQualityMarkers/UnknownAQ.png',  iconSize: [64, 64], iconAnchor: [32, 64], popupAnchor: [0, -48] }),
            defaultGreen:            L.icon({ iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/green-dot.png', iconSize: [32, 32], iconAnchor: [16, 32], popupAnchor: [0, -32] }),
            defaultBlue:             L.icon({ iconUrl: 'https://maps.gstatic.com/mapfiles/ms2/micons/blue-dot.png', iconSize: [32, 32], iconAnchor: [16, 32], popupAnchor: [0, -32] }),
        };
        //Icon Data fetching & PopUp Data fetching
        const [iconNames, textValues] = await Promise.all([
                fetch('/api/sensor/GetIconDataBatch', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(sensorData)
                }).then(r => r.json()),

                fetch('/api/sensor/GetPopUpDataBatch', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(sensorData)
                }).then(r => r.json())
            ]);

        const markers = L.markerClusterGroup();

        sensorData.forEach((sensor, index) => {
            let latLng = null;
            let popupText = textValues[index].sensorId +"|||"+ JSON.stringify(textValues[index].textResults) || "Sensor";
            const iconName = iconNames[index].icon;
            let icon = icons[iconName.toString()] || icons["defaultGreen"];

            if (sensor.latitude != null && sensor.longitude != null) {
                latLng = L.latLng(sensor.latitude, sensor.longitude);
            } else if (sensor.location?.latitude != null && sensor.location?.longitude != null) {
                latLng = L.latLng(sensor.location.latitude, sensor.location.longitude);
                icon = icons[iconName.toString()] || icons["defaultBlue"];
            }

            if (latLng) {
                const marker = L.marker(latLng, { icon }).bindPopup(popupText);
                markers.addLayer(marker);
            }
        });
        delete sensorData;

        map.addLayer(markers);

        let userLatLng = null;
        let routingControl = null;
        let destinationMarker = null;

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                userLatLng = L.latLng(position.coords.latitude, position.coords.longitude);

                L.marker(userLatLng).addTo(map)
                    .bindPopup("Twoja aktualna lokalizacja");

                map.setView(userLatLng, 10);
            }, function (error) {
                console.error("Błąd uzyskiwania lokalizacji: ", error);
            });
        }

        map.on('contextmenu', function (e) {
            if (!userLatLng) {
                alert("Lokalizacja użytkownika nie jest jeszcze dostępna.");
                return;
            }

            const destLatLng = e.latlng;

            if (destinationMarker) {
                map.removeLayer(destinationMarker);
            }

            destinationMarker = L.marker(destLatLng).addTo(map)
                .bindPopup("Nowy punkt docelowy")
                .openPopup();

            if (routingControl) {
                map.removeControl(routingControl);
            }

            routingControl = L.Routing.control({
                waypoints: [userLatLng, destLatLng],
                routeWhileDragging: false,
                show: false,
                createMarker: () => null
            }).addTo(map);
        });
    });
</script>


